@page "/queryadmin"
@inject ClientModel clientModel
@inject IJSRuntime js
@inject NavigationManager uriHelper


@if (ErrorMessage != null)
{
    <div class="alert alert-danger" role="alert">
        <pre>@ErrorMessage</pre>
    </div>
}
else
{
    <div class="top-row">
        <h1> Query administration </h1>
        <h2>Configure and modify queries</h2>

        <hr />
    </div>

    @if (queryItems == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <h2>Add new top level query</h2>
        <button class="btn btn-primary" @onclick="() => CreateNewQuery(null)">
            <span class="oi oi-plus" aria-hidden="true">Create New</span>
        </button>

        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Label</th>
                    <th>Description</th>
                    <th>Sql Statement</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var itm in queryItems)
                {
                    <tr>
                        <td>@itm.Name</td>
                        <td>@itm.Label</td>
                        <td>@itm.Description</td>
                        <td>@itm.Sql</td>
                        <td>
                            <button class="btn btn-primary" @onclick="() => EditQuery(itm.Name)">
                                <span class="oi oi-pencil" aria-hidden="true"/>Edit
                            </button>
                            <button class="btn btn-primary" @onclick="() => CreateNewQuery(itm.Name)">
                                <span class="oi oi-plus" aria-hidden="true"/>New child query
                            </button>
                            <button class="btn btn-primary" @onclick="() => Delete(itm.Name)">
                                <span class="oi oi-delete" aria-hidden="true"/>Delete
                            </button>
                            
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }

}

@code {
    private string ErrorMessage { get; set; }
    private List<QueryItem> queryItems;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            queryItems = await clientModel.GatewayRestlessDb.FetchQueryItemsAsync();
        }
        catch (HttpRequestException e)
        {
            ErrorMessage = $"HttpRequestException: httpstatus: {e.StatusCode}\nMessage:{e.Message}\n=====\nType: {e.GetType()}\nStack trace:\n==========\n{e.StackTrace}";
        }
        catch (Exception e)
        {
            ErrorMessage = $"{e.Message}\nType: {e.GetType()}\nStack trace:\n==========\n{e.StackTrace}";
        }
    }

    async Task Delete(string qryItemName)
    {
        if (await js.InvokeAsync<bool>("confirm", $"Do you want to delete the query '{qryItemName}' ?"))
        {
            try
            {
                ErrorMessage = null;
                await clientModel.GatewayRestlessDb.DeleteQueryItemAsync(qryItemName);
                clientModel.InvalidateCaches();
                await js.InvokeVoidAsync("alert", $"Query item '{qryItemName}' successfully deleted");
            }
            catch (HttpRequestException e)
            {
                ErrorMessage = e.Message;
            }
        }
    }

    void CreateNewQuery(string parentQuery)
    {
        uriHelper.NavigateTo($"/qryitemnew?parent={parentQuery}");
    }

    void EditQuery(string queryName)
    {
        uriHelper.NavigateTo($"/qryitemedit/{queryName}");
    }
}
