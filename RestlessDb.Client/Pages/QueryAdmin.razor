@page "/queryadmin"
@inject ClientModel clientModel
@inject NavigationManager uriHelper

<MudText Typo="Typo.h1">Query administration</MudText>
<MudText Typo="Typo.h2">Configure and modify queries</MudText>
@if (!string.IsNullOrEmpty(ErrorMessage) )
{
    <MudAlert Severity="Severity.Error">
        <MudText Color="@Color.Error">@ErrorMessage</MudText>
    </MudAlert>
}
<MudDivider DividerType="DividerType.Middle" Class="my-6"/>

@if (queryMetaDatas == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <MudText Typo="Typo.caption">Add new top level query</MudText>
    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" Class="ml-1" OnClick="@(() => CreateNewQuery(null))">Add new</MudButton>
    
    <MudSimpleTable Style="overflow-x: auto;" Bordered="true">
        <thead>
            <tr>
                <th width="20%">Name</th>
                <th>Label</th>
                <th>Description</th>
                <th>Columns</th>
                <th>Params</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach(var qryMeta in queryMetaDatas)
            {
                <QueryItemRow QueryMeta=qryMeta Level="0"/>
            }
        </tbody>
    </MudSimpleTable>
}

@code 
{
    private string ErrorMessage { get; set; }
    private List<QueryMetaData> queryMetaDatas = null;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await clientModel.CheckInitAsync();
            queryMetaDatas = clientModel.QueryMetaDatas;

        }
        catch (HttpRequestException e)
        {
            ErrorMessage = $"HttpRequestException: httpstatus: {e.StatusCode}\nMessage:{e.Message}\n=====\nType: {e.GetType()}\nStack trace:\n==========\n{e.StackTrace}";
        }
        catch (Exception e)
        {
            ErrorMessage = $"{e.Message}\nType: {e.GetType()}\nStack trace:\n==========\n{e.StackTrace}";
        }
    }

    private void CreateNewQuery(string parentQuery)
    {
        uriHelper.NavigateTo($"/qryitemnew?parent={parentQuery}");
    }
}
