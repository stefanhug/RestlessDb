@page "/showquery/{queryitem}"
@using System.IO
@using System.Text
@inject IJSRuntime JS
@inject ClientModel ClientModel

@if (Error != null)
{
<div class="alert alert-danger" role="alert">
    <pre>@Error</pre>
</div>
}
else if (QueryMetaData == null)
{
    <p><em>Loading...</em></p>
}
else
{
<div class="top-row">
    <h1>@QueryMetaData.Label</h1>
    <h2>@QueryMetaData.Description</h2>

    <p>
        Output format: <select name="outputformat" @bind="OutputFormat">
                            @foreach(var format in ClientModel.FormatterInfos)
                            {
                                <option value="@format.OutputFormat">@format.Name</option>
                            }
                        </select>

    </p>
    <p>
        Offset: <input type="number" @bind="Offset" />Maxrows: <input type="number" @bind="MaxRows" />
    </p>
    <p>
        <button @onclick="ShowQueryResultsAsync">Show query results</button>
    </p>
    <hr />
</div>
    @if (PageDataContent != null)
    {
        @((MarkupString)PageDataContent)
    }
}

@code {
    [Parameter]
    public string QueryItem { get; set; }

    public int Offset { get; set; } = 0;
    public int MaxRows { get; set; } = 500;
    public string OutputFormat { get; set; } 


    public string Error { get; set; }

    public QueryMetaData QueryMetaData { get; set; }

    public string PageDataContent { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await ClientModel.CheckInitAsync();
        OutputFormat = ClientModel.FormatterInfos.FirstOrDefault(f => f.Disposition == Disposition.EMBEDDED).OutputFormat;
    }

    protected override async Task OnParametersSetAsync()
    {
        Error = null;
        QueryMetaData = await ClientModel.GetConfigItemAsync(QueryItem);
        PageDataContent = null;
    }

    public async Task ShowQueryResultsAsync()
    {
        Error = null;
        PageDataContent = "Loading...";
        try
        {
            var httpResponseMessage = await ClientModel.GatewayRestlessDb.FetchQueryContentAsync(QueryItem, OutputFormat, Offset, MaxRows);
            var formatterInfo = ClientModel.FormatterInfos.First(f => f.OutputFormat == OutputFormat);
            if (formatterInfo.Disposition == Disposition.EMBEDDED)
            {
                PageDataContent = await httpResponseMessage.Content.ReadAsStringAsync(); 
            }
            else
            {
                var fileName = $"{QueryMetaData.Name}.{formatterInfo.FileExtension}";
                var stream = await httpResponseMessage.Content.ReadAsStreamAsync();
                PageDataContent = $"File {fileName} downloaded";
                using (var streamRef = new DotNetStreamReference(stream: stream))
                {
                     await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
                }
            }
        }
        catch (HttpRequestException e)
        {
            Error = $"HttpRequestException: httpstatus: {e.StatusCode}\nMessage:{e.Message}\n=====\nType: {e.GetType()}\nStack trace:\n==========\n{e.StackTrace}";
        }
        catch (Exception e)
        {
            Error = $"{e.Message}\nType: {e.GetType()}\nStack trace:\n==========\n{e.StackTrace}";
        }
    }
}
