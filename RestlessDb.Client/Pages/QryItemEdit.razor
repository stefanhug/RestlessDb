@page "/qryitemedit/{qryitemname}"
@page "/qryitemnew"

@inject ClientModel clientModel
@inject NavigationManager uriHelper

@if (QryItemName == null)
{
    <div class="alert alert-primary">
        Add a new qry item @((MarkupString)(!string.IsNullOrEmpty(QryItemParent) ? $" for parent <i>{QryItemParent}</i>" : " (top level)"))
    </div>
}
else
{
    <div class="alert alert-primary">
        Edit query item @QryItemName
    </div>
}

@if (ErrorMessage != null)
{
    <div class="alert alert-danger" role="alert">
        <pre>@ErrorMessage</pre>
    </div>
}
<EditForm Model="@queryItemEdit" OnValidSubmit="@HandleSubmitAsync">
    <label>Query Name:</label>
    <div>
        @if (QryItemName == null)
        {
            <InputText @bind-Value="@queryItemEdit.Name" />
        }
        else
        {
            @queryItemEdit.Name
        }
    </div>
    <label>Parent:</label>
    <div>
        @(queryItemEdit.Parent ?? "--top level--")
    </div>
    <label>Label:</label>
    <div>
        <InputText @bind-Value="@queryItemEdit.Label" />
    </div>
    <label>Description:</label>
    <div>
        <InputText @bind-Value="@queryItemEdit.Description" />
    </div>
    <label>Pos:</label>
    <div>
        <InputNumber @bind-Value="@queryItemEdit.Pos" />
    </div>
    <label>Sql:</label>
    <div>
        <InputTextArea @bind-Value="@queryItemEdit.Sql" />
    </div>

    <button type="submit" class="btn btn-success">
        Submit
    </button>
    <button type="cancel" class="btn-success" @onclick="() =>HandleCancel()">
        Cancel
    </button>

</EditForm>

@code
{
    [Parameter]
    public string QryItemName { get; set; }
    public string QryItemParent { get; set; }

    public string ErrorMessage;
    private QueryItem queryItemEdit = new QueryItem();

    bool IsUpdate() => QryItemName != null;

    protected override async Task OnInitializedAsync()
    {
        var uri = uriHelper.ToAbsoluteUri(uriHelper.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("parent", out var parentTmp))
        {
            QryItemParent = parentTmp;
        }

        try
        {
            if (IsUpdate())
            {
                queryItemEdit = await clientModel.GatewayRestlessDb.FetchQueryItemAsync(QryItemName);
            }
            else
            {
                queryItemEdit = new() { Parent = QryItemParent };
            }
        }
        catch (HttpRequestException e)
        {
            ErrorMessage = e.Message;
        }

    }

    private async Task HandleSubmitAsync()
    {
        try
        {
            if (IsUpdate())
            {
                await clientModel.GatewayRestlessDb.UpdateQueryItemAsync(queryItemEdit);
                clientModel.InvalidateCaches();
            }
            else
            {
                await clientModel.GatewayRestlessDb.InsertQueryItemAsync(queryItemEdit);
                clientModel.InvalidateCaches();
            }
            uriHelper.NavigateTo("/queryadmin");
        }
        catch (HttpRequestException e)
        {
            ErrorMessage = e.Message;
        }
    }

    private void HandleCancel()
    {
        uriHelper.NavigateTo("/queryadmin");
    }
}
