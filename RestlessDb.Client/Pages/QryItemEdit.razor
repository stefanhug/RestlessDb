@page "/qryitemedit/{qryitemname}"
@page "/qryitemnew"

@inject ClientModel clientModel
@inject NavigationManager uriHelper

<MudAlert Severity="Severity.Normal">
    @GetHeaderText()
</MudAlert>

@if (!string.IsNullOrEmpty(serverErrorMessage) || errors.Count() > 0)
{
    <MudAlert Severity="Severity.Error">
        @foreach(var error in errors)
        {
            <MudText Color="@Color.Error">@error</MudText>
        }
        <MudText Color="@Color.Error">@serverErrorMessage</MudText>
    </MudAlert>
}

<MudCard>
    <MudCardContent>
        <MudForm @ref="form" @bind-Errors="@errors" >
            <MudTextField T="string" @bind-Value="@queryItemEdit.Name" Label="Query name" 
                          Required="true" RequiredError="Query name is required" MaxLength="256"/>
            <MudTextField T="string" @bind-Value="@queryItemEdit.Parent" Label="Parent" Disabled="true" />
            <MudTextField T="string" @bind-Value="@queryItemEdit.Label" Label="Label" 
                          Required="true" RequiredError="Label is required" MaxLength="256"/>
            <MudTextField T="string" @bind-Value="@queryItemEdit.Description" Label="Description" MaxLength="2048" Lines="3"/>
            <MudTextField T="int" @bind-Value="@queryItemEdit.Pos" Label="Pos" InputType="InputType.Number" />
            <MudTextField T="string" @bind-Value="@queryItemEdit.Sql" Label="Sql statement" 
                          Required="true" RequiredError="Sql statement name is required"MaxLength="2048" Lines="10"/>
        </MudForm>
    </MudCardContent>
    <MudCardActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-1" OnClick="@HandleCancel">Cancel</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-1" OnClick="@HandleSubmitAsync">Save</MudButton>
    </MudCardActions>
</MudCard>

@code
{
    [Parameter]
    public string QryItemName { get; set; }
    public string QryItemParent { get; set; }

    MudForm form;
    string[] errors = { };
    public string serverErrorMessage;
    private QueryItem queryItemEdit = new QueryItem();

    bool isUpdate;

    protected override async Task OnInitializedAsync()
    {
        var uri = uriHelper.ToAbsoluteUri(uriHelper.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("parent", out var parentTmp))
        {
            QryItemParent = parentTmp;
        }

        isUpdate = QryItemName != null;

        try
        {
            if (isUpdate)
            {
                queryItemEdit = await clientModel.GatewayRestlessDb.FetchQueryItemAsync(QryItemName);
            }
            else
            {
                queryItemEdit = new() { Parent = QryItemParent };
            }
        }
        catch (HttpRequestException e)
        {
            serverErrorMessage = e.Message;
        }

    }

    private MarkupString GetHeaderText()
    {
        if (isUpdate)
        {
            return (MarkupString)$"Edit query item <i>{QryItemName}</i>";
        }
        else if (string.IsNullOrEmpty(QryItemParent))
        {
            return (MarkupString)"Add new query item (top level)";
        }
        else
        {
            return (MarkupString)$"Add new query item for parent <i>{QryItemParent}</i>";
        }
    }

    private async Task HandleSubmitAsync()
    {
        await form.Validate();

        if (!form.IsValid)
        {
            return;
        }
        try
        {
            if (isUpdate)
            {
                await clientModel.GatewayRestlessDb.UpdateQueryItemAsync(queryItemEdit);
                clientModel.InvalidateCaches();
            }
            else
            {
                await clientModel.GatewayRestlessDb.InsertQueryItemAsync(queryItemEdit);
                clientModel.InvalidateCaches();
            }
            uriHelper.NavigateTo("/queryadmin");
        }
        catch (HttpRequestException e)
        {
            serverErrorMessage = e.Message;
        }
    }

    private void HandleCancel()
    {
        uriHelper.NavigateTo("/queryadmin");
    }
}
