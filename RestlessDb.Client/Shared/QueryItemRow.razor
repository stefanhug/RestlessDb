@inject ClientModel clientModel
@inject NavigationManager uriHelper

<tr class="@GetRowClassForLevel()">
    <td>@decoratedName</td>
    <td>@QueryMeta.Label</td>
    <td>@QueryMeta.Description</td>
    <td>@cols</td>
    <td>@parameters</td>
    <td>
        <MudButtonGroup Color="Color.Primary" Variant="Variant.Filled" Size="Size.Small" VerticalAlign="true">
            <MudButton OnClick="() => EditQuery(QueryMeta.Name)">Edit</MudButton>
            <MudButton OnClick="() => CreateNewQuery(QueryMeta.Name)" Style="white-space:nowrap;">New child query</MudButton>
            <MudButton OnClick="() => DeleteQuery(QueryMeta.Name)">Delete</MudButton>
        </MudButtonGroup>
    </td>
</tr>
@if (QueryMeta.Children != null)
{
    foreach (var childMeta in QueryMeta.Children)
    {
        <QueryItemRow QueryMeta=@childMeta Level=@(Level + 1) />
    }
}


@code
{
    [Parameter]
    [EditorRequired]
    public QueryMetaData QueryMeta { get; set; }
    [Parameter]
    [EditorRequired]
    public int Level { get; set; }

    public string ErrorMessage { get; set; }

    private string cols;
    private string parameters;
    private string decoratedName;

    protected override void OnParametersSet()
    {
        cols = string.Join(", ", from col in QueryMeta.Columns select col.Label);
        parameters = string.Join(", ", QueryMeta.Parameters);
        decoratedName = string.Concat(Enumerable.Repeat(" >> ", Level)) + QueryMeta.Name;
    }

    private void CreateNewQuery(string parentQuery)
    {
        uriHelper.NavigateTo($"/qryitemnew?parent={parentQuery}");
    }

    private void EditQuery(string queryName)
    {
        uriHelper.NavigateTo($"/qryitemedit/{queryName}");
    }

    private void DeleteQuery(string queryName)
    {
        uriHelper.NavigateTo($"/qryitemdelete/{queryName}");
    }

    private string GetRowClassForLevel()
    {
        switch (Level)
        {
            case 0:
                return string.Empty;
            case 1:
                return string.Empty;
            case 2:
            default:
                return string.Empty;
        }
    }

}
